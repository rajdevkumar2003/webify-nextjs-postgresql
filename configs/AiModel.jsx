const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "text/plain",
};

const CodeGenerationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [],
});

export const GenAiCode=model.startChat({
  generationConfig:CodeGenerationConfig,
  history: [
      {
        role: "user",
        parts: [
          {text: "generate a TODO app :  Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   "},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"projectTitle\": \"Beautiful Todo App\",\n  \"explanation\": \"This project implements a beautiful and functional todo application using React and Tailwind CSS for styling. It is structured into several components for managing tasks, displaying list of tasks, handling task creation, and showing date. The app also includes a filter to see pending and completed tasks. Icons from lucide-react are used to add UI functionalities.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport TaskList from './components/TaskList';\\nimport AddTask from './components/AddTask';\\nimport DateDisplay from './components/DateDisplay';\\n\\n\\nfunction App() {\\n  const [tasks, setTasks] = useState(() => {\\n    const savedTasks = localStorage.getItem('tasks');\\n    return savedTasks ? JSON.parse(savedTasks) : [];\\n  });\\n\\n    const [filter, setFilter] = useState('all'); // 'all', 'pending', 'completed'\\n    \\n    const filteredTasks = () => {\\n      switch (filter) {\\n          case 'pending':\\n            return tasks.filter(task => !task.completed);\\n          case 'completed':\\n            return tasks.filter(task => task.completed);\\n          default:\\n              return tasks;\\n      }\\n    }\\n\\n  useEffect(() => {\\n    localStorage.setItem('tasks', JSON.stringify(tasks));\\n  }, [tasks]);\\n\\n  const handleAddTask = (newTask) => {\\n    setTasks([...tasks, newTask]);\\n  };\\n\\n  const handleToggleComplete = (id) => {\\n    setTasks(tasks.map(task =>\\n      task.id === id ? { ...task, completed: !task.completed } : task\\n    ));\\n  };\\n\\n  const handleDeleteTask = (id) => {\\n    setTasks(tasks.filter(task => task.id !== id));\\n  };\\n  \\n  const handleFilterChange = (newFilter) => {\\n    setFilter(newFilter);\\n};\\n\\n  return (\\n    <div className=\\\"flex flex-col min-h-screen bg-gray-100\\\">\\n        <header className=\\\"bg-white shadow-md py-4 text-center\\\">\\n            <h1 className=\\\"text-3xl font-bold text-gray-800 tracking-wide\\\">Task Manager üìù</h1>\\n            <DateDisplay/>\\n      </header>\\n\\n      <div className=\\\"flex justify-center flex-1 p-8\\\">\\n        <div className=\\\"w-full max-w-3xl space-y-6\\\">\\n            <AddTask onAddTask={handleAddTask} />\\n              <div className=\\\"flex justify-around space-x-4\\\">\\n                   <button onClick={() => handleFilterChange('all')} className={`bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded-md focus:outline-none ${filter === 'all' ? 'font-bold' : ''}`}>All</button>\\n                    <button onClick={() => handleFilterChange('pending')} className={`bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded-md focus:outline-none ${filter === 'pending' ? 'font-bold' : ''}`}>Pending</button>\\n                    <button onClick={() => handleFilterChange('completed')} className={`bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded-md focus:outline-none ${filter === 'completed' ? 'font-bold' : ''}`}>Completed</button>\\n                </div>\\n             <TaskList tasks={filteredTasks()} onToggleComplete={handleToggleComplete} onDeleteTask={handleDeleteTask} />\\n         \\n        </div>\\n      </div>\\n\\n      <footer className=\\\"bg-gray-800 text-white text-center py-4\\\">\\n        &copy; {new Date().getFullYear()} Task Manager\\n      </footer>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/AddTask.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\nimport { v4 as uuidv4 } from 'uuid';\\n\\nfunction AddTask({ onAddTask }) {\\n  const [taskName, setTaskName] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (taskName.trim()) {\\n      const newTask = {\\n        id: uuidv4(),\\n        name: taskName,\\n        completed: false\\n      };\\n      onAddTask(newTask);\\n      setTaskName('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"flex rounded-md shadow-md overflow-hidden\\\">\\n      <input\\n        type=\\\"text\\\"\\n        placeholder=\\\"Add a new task...\\\"\\n        value={taskName}\\n        onChange={(e) => setTaskName(e.target.value)}\\n        className=\\\"flex-1 p-4 border-r focus:outline-none\\\"\\n      />\\n      <button type=\\\"submit\\\" className=\\\"bg-blue-500 hover:bg-blue-600 text-white font-bold p-4 flex items-center justify-center focus:outline-none\\\">\\n        <Plus className=\\\"w-5 h-5\\\"/>\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default AddTask;\"\n    },\n    \"/components/TaskList.js\": {\n      \"code\": \"import React from 'react';\\nimport { Trash, Check } from 'lucide-react';\\n\\nfunction TaskList({ tasks, onToggleComplete, onDeleteTask }) {\\n\\n    if (tasks.length === 0) {\\n        return <p className=\\\"text-center text-gray-500 mt-4\\\">No tasks added yet. Start by adding a task!</p>;\\n    }\\n\\n  return (\\n    <ul className=\\\"space-y-2\\\">\\n      {tasks.map((task) => (\\n        <li key={task.id}\\n        className=\\\"bg-white shadow-md rounded-md p-4 flex items-center justify-between hover:shadow-lg transform transition-transform hover:scale-102\\\"\\n        >\\n          <div className=\\\"flex items-center flex-1\\\">\\n            <input\\n              type=\\\"checkbox\\\"\\n              checked={task.completed}\\n              onChange={() => onToggleComplete(task.id)}\\n              className=\\\"mr-3 h-5 w-5 text-blue-600 cursor-pointer focus:ring-blue-500 border-gray-300 rounded\\\"\\n            />\\n            <span className={`${task.completed ? 'line-through text-gray-500' : 'text-gray-800' } text-lg`}>\\n                {task.name}\\n            </span>\\n          </div>\\n          <button onClick={() => onDeleteTask(task.id)} className=\\\"text-red-500 hover:text-red-700 focus:outline-none\\\">\\n            <Trash className=\\\"w-5 h-5\\\"/>\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default TaskList;\"\n    },\n    \"/components/DateDisplay.js\": {\n      \"code\": \"import React from 'react';\\nimport { format } from 'date-fns';\\n\\nfunction DateDisplay() {\\n  const today = new Date();\\n  const formattedDate = format(today, 'EEEE, MMMM d, yyyy');\\n\\n  return (\\n    <div className=\\\"text-gray-500 text-sm mt-1\\\">\\n      {formattedDate}\\n    </div>\\n  );\\n}\\n\\nexport default DateDisplay;\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/AddTask.js\",\n    \"/components/TaskList.js\",\n    \"/components/DateDisplay.js\"\n  ]\n}\n```\n"},
        ],
      },
    ],
})
